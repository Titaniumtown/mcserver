From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Fri, 5 Feb 2021 14:39:12 -0500
Subject: [PATCH] Re-implement some vanilla bugs


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 4a21a83c448355d61fb946bd0eb5d752767d536a..a902caa09d1029735dd4a26845d7302435ca9feb 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -354,14 +354,14 @@ public class PaperConfig {
             velocitySecretKey = secret.getBytes(StandardCharsets.UTF_8);
         }
     }
-
+    /*
     public static int maxBookPageSize = 2560;
     public static double maxBookTotalSizeMultiplier = 0.98D;
     private static void maxBookSize() {
         maxBookPageSize = getInt("settings.book-size.page-max", maxBookPageSize);
         maxBookTotalSizeMultiplier = getDouble("settings.book-size.total-multiplier", maxBookTotalSizeMultiplier);
     }
-
+    */
     public static boolean useOptimizedTickList = true;
     private static void useOptimizedTickList() {
         if (config.contains("settings.use-optimized-ticklist")) { // don't add default, hopefully temporary config
@@ -424,6 +424,7 @@ public class PaperConfig {
         midTickChunkTasks = getInt("settings.chunk-tasks-per-tick", midTickChunkTasks);
     }
 
+    /*
     public static boolean allowBlockPermanentBreakingExploits = false;
     private static void allowBlockPermanentBreakingExploits() {
         if (config.contains("allow-perm-block-break-exploits")) {
@@ -435,25 +436,27 @@ public class PaperConfig {
         allowBlockPermanentBreakingExploits = getBoolean("settings.unsupported-settings.allow-permanent-block-break-exploits", allowBlockPermanentBreakingExploits);
 
     }
+    */
 
     public static boolean consoleHasAllPermissions = false;
     private static void consoleHasAllPermissions() {
         consoleHasAllPermissions = getBoolean("settings.console-has-all-permissions", consoleHasAllPermissions);
     }
-
+    /*
     public static boolean allowPistonDuplication;
     private static void allowPistonDuplication() {
         config.set("settings.unsupported-settings.allow-piston-duplication-readme", "This setting controls if player should be able to use TNT duplication, but this also allows duplicating carpet, rails and potentially other items");
         allowPistonDuplication = getBoolean("settings.unsupported-settings.allow-piston-duplication", config.getBoolean("settings.unsupported-settings.allow-tnt-duplication", false));
         set("settings.unsupported-settings.allow-tnt-duplication", null);
     }
-
+    /*
+    /*
     public static boolean allowHeadlessPistons;
     private static void allowHeadlessPistons() {
         config.set("settings.unsupported-settings.allow-headless-pistons-readme", "This setting controls if players should be able to create headless pistons.");
         allowHeadlessPistons = getBoolean("settings.unsupported-settings.allow-headless-pistons", false);
     }
-
+    */
     public static int playerAutoSaveRate = -1;
     public static int maxPlayerAutoSavePerTick = 10;
     private static void playerAutoSaveRate() {
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index c276a2896ba73d86e7e18d656903b36d2970ac41..5af6abbdce32553581e25c59e649e0e9f9d84466 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -23,6 +23,7 @@ public class Block extends BlockBase implements IMaterial {
     protected final BlockStateList<Block, IBlockData> blockStateList;
     private IBlockData blockData;
     // Paper start
+    /*
     public final boolean isDestroyable() {
         return com.destroystokyo.paper.PaperConfig.allowBlockPermanentBreakingExploits ||
             this != Blocks.BEDROCK &&
@@ -36,6 +37,7 @@ public class Block extends BlockBase implements IMaterial {
             this != Blocks.STRUCTURE_BLOCK &&
             this != Blocks.JIGSAW;
     }
+    */
     public co.aikar.timings.Timing timing;
     public co.aikar.timings.Timing getTiming() {
         if (timing == null) {
diff --git a/src/main/java/net/minecraft/server/BlockBase.java b/src/main/java/net/minecraft/server/BlockBase.java
index 9907047028b754fe0e314a7d5c5238ce4286c373..015d6a0763cfe7cfaebad8dce36676cf2a08b7ab 100644
--- a/src/main/java/net/minecraft/server/BlockBase.java
+++ b/src/main/java/net/minecraft/server/BlockBase.java
@@ -144,7 +144,8 @@ public abstract class BlockBase {
 
     @Deprecated
     public boolean a(IBlockData iblockdata, BlockActionContext blockactioncontext) {
-        return this.material.isReplaceable() && (blockactioncontext.getItemStack().isEmpty() || blockactioncontext.getItemStack().getItem() != this.getItem()) && (iblockdata.isDestroyable() || (blockactioncontext.getEntity() != null && blockactioncontext.getEntity().abilities.canInstantlyBuild)); // Paper
+        // return this.material.isReplaceable() && (blockactioncontext.getItemStack().isEmpty() || blockactioncontext.getItemStack().getItem() != this.getItem()) && (iblockdata.isDestroyable() || (blockactioncontext.getEntity() != null && blockactioncontext.getEntity().abilities.canInstantlyBuild)); // Paper
+        return this.material.isReplaceable() && (blockactioncontext.getItemStack().isEmpty() || blockactioncontext.getItemStack().getItem() != this.getItem());
     }
 
     @Deprecated
@@ -409,11 +410,13 @@ public abstract class BlockBase {
         public Block getBlock() {
             return (Block) this.c;
         }
+        /*
         // Paper start
         public final boolean isDestroyable() {
             return getBlock().isDestroyable();
         }
         // Paper end
+        */
         public Material getMaterial() {
             return this.g;
         }
@@ -505,7 +508,8 @@ public abstract class BlockBase {
         }
 
         public EnumPistonReaction getPushReaction() {
-            return !isDestroyable() ? EnumPistonReaction.BLOCK : this.getBlock().getPushReaction(this.p()); // Paper
+            // return !isDestroyable() ? EnumPistonReaction.BLOCK : this.getBlock().getPushReaction(this.p()); // Paper
+            return this.getBlock().getPushReaction(this.p());
         }
 
         public boolean i(IBlockAccess iblockaccess, BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 7f084e7f11a829c10d113c7fb39eec0b8ad77080..74e69e49e06d8874f0e94768fffe8b51c247988e 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -166,12 +166,14 @@ public class BlockPiston extends BlockDirectional {
     @Override
     public boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, int i, int j) {
         EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+        /*
         // Paper start - prevent retracting when we're facing the wrong way (we were replaced before retraction could occur)
         EnumDirection directionQueuedAs = EnumDirection.fromType1(j & 7); // Paper - copied from below
         if (!com.destroystokyo.paper.PaperConfig.allowBlockPermanentBreakingExploits && enumdirection != directionQueuedAs) {
             return false;
         }
         // Paper end - prevent retracting when we're facing the wrong way
+        */
 
         if (!world.isClientSide) {
             boolean flag = this.a(world, blockposition, enumdirection);
@@ -203,7 +205,8 @@ public class BlockPiston extends BlockDirectional {
             IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.MOVING_PISTON.getBlockData().set(BlockPistonMoving.a, enumdirection)).set(BlockPistonMoving.b, this.sticky ? BlockPropertyPistonType.STICKY : BlockPropertyPistonType.DEFAULT);
 
             world.setTypeAndData(blockposition, iblockdata1, 20);
-            world.setTileEntity(blockposition, BlockPistonMoving.a((IBlockData) this.getBlockData().set(BlockPiston.FACING, EnumDirection.fromType1(j & 7)), enumdirection, false, true)); // Paper - diff on change, j is facing direction - copy this above
+            // world.setTileEntity(blockposition, BlockPistonMoving.a((IBlockData) this.getBlockData().set(BlockPiston.FACING, EnumDirection.fromType1(j & 7)), enumdirection, false, true)); // Paper - diff on change, j is facing direction - copy this above
+            world.setTileEntity(blockposition, BlockPistonMoving.a((IBlockData) this.getBlockData().set(BlockPiston.FACING, EnumDirection.fromType1(j & 7)), enumdirection, false, true));
             world.update(blockposition, iblockdata1.getBlock());
             iblockdata1.a(world, blockposition, 2);
             if (this.sticky) {
@@ -232,6 +235,8 @@ public class BlockPiston extends BlockDirectional {
                     }
                 }
             } else {
+                world.a(blockposition.shift(enumdirection), false);
+                /*
                 // Paper start - fix headless pistons breaking blocks
                 BlockPosition headPos = blockposition.shift(enumdirection);
                 if (com.destroystokyo.paper.PaperConfig.allowBlockPermanentBreakingExploits || world.getType(headPos) == Blocks.PISTON_HEAD.getBlockData().set(FACING, enumdirection)) { // double check to make sure we're not a headless piston.
@@ -240,6 +245,7 @@ public class BlockPiston extends BlockDirectional {
                     ((WorldServer)world).getChunkProvider().flagDirty(headPos); // ... fix client desync
                 }
                 // Paper end - fix headless pistons breaking blocks
+                */
             }
 
             world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_PISTON_CONTRACT, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
@@ -371,14 +377,20 @@ public class BlockPiston extends BlockDirectional {
             }
 
             for (k = list.size() - 1; k >= 0; --k) {
+                blockposition3 = (BlockPosition) list.get(k);
+                iblockdata1 = world.getType(blockposition3);
+                /*
                 // Paper start - fix a variety of piston desync dupes
                 boolean allowDesync = com.destroystokyo.paper.PaperConfig.allowPistonDuplication;
                 BlockPosition oldPos = blockposition3 = (BlockPosition) list.get(k);
                 iblockdata1 = allowDesync ? world.getType(oldPos) : null;
                 // Paper end - fix a variety of piston desync dupes
+                */
                 blockposition3 = blockposition3.shift(enumdirection1);
                 map.remove(blockposition3);
                 world.setTypeAndData(blockposition3, (IBlockData) Blocks.MOVING_PISTON.getBlockData().set(BlockPiston.FACING, enumdirection), 68);
+                world.setTileEntity(blockposition3, BlockPistonMoving.a((IBlockData) list1.get(k), enumdirection, flag, false));
+                /*
                 // Paper start - fix a variety of piston desync dupes
                 if (!allowDesync) {
                     iblockdata1 = world.getType(oldPos);
@@ -389,6 +401,7 @@ public class BlockPiston extends BlockDirectional {
                     world.setTypeAndData(oldPos, Blocks.AIR.getBlockData(), 2 | 4 | 16 | 1024); // set air to prevent later physics updates from seeing this block
                 }
                 // Paper end - fix a variety of piston desync dupes
+                */
                 aiblockdata[j++] = iblockdata1;
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 76aac1b131f314775e418339e434f4f2da2ad619..1bf5891dfc063978cded3e10effe6a934f3e1251 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -64,11 +64,13 @@ public class EntityFallingBlock extends Entity {
 
     @Override
     public void tick() {
+        /*
         // Paper start - fix sand duping
         if (this.dead) {
             return;
         }
         // Paper end - fix sand duping
+        */
         if (this.block.isAir()) {
             this.die();
         } else {
@@ -90,13 +92,13 @@ public class EntityFallingBlock extends Entity {
             }
 
             this.move(EnumMoveType.SELF, this.getMot());
-
+            /*
             // Paper start - fix sand duping
             if (this.dead) {
                 return;
             }
             // Paper end - fix sand duping
-
+            */
             // Paper start - Configurable EntityFallingBlock height nerf
             if (this.world.paperConfig.fallingBlockHeightNerf != 0 && this.locY() > this.world.paperConfig.fallingBlockHeightNerf) {
                 if (this.dropItem && this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 5ca4d03215c979a4d122a32178a1859b4d9c3334..7735bec16a6b518a081324d28c85377d60cb5f91 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -125,7 +125,7 @@ public class Explosion {
                         for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
                             BlockPosition blockposition = new BlockPosition(d4, d5, d6);
                             IBlockData iblockdata = this.world.getType(blockposition);
-                            if (!iblockdata.isDestroyable()) continue; // Paper
+                            // if (!iblockdata.isDestroyable()) continue; // Paper
                             Fluid fluid = iblockdata.getFluid(); // Paper
                             Optional<Float> optional = this.l.a(this, this.world, blockposition, iblockdata, fluid);
 
@@ -135,6 +135,7 @@ public class Explosion {
 
                             if (f > 0.0F && this.l.a(this, this.world, blockposition, iblockdata, f) && blockposition.getY() < 256 && blockposition.getY() >= 0) { // CraftBukkit - don't wrap explosions
                                 set.add(blockposition);
+                                /*
                                 // Paper start - prevent headless pistons from forming
                                 if (!com.destroystokyo.paper.PaperConfig.allowHeadlessPistons && iblockdata.getBlock() == Blocks.MOVING_PISTON) {
                                     TileEntity extension = this.world.getTileEntity(blockposition);
@@ -144,6 +145,7 @@ public class Explosion {
                                     }
                                 }
                                 // Paper end
+                                */
                             }
 
                             d4 += d0 * 0.30000001192092896D;
@@ -288,7 +290,8 @@ public class Explosion {
                 IBlockData iblockdata = this.world.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
-                if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
+                // if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
+                if (!iblockdata.isAir()) {
                     BlockPosition blockposition1 = blockposition.immutableCopy();
 
                     this.world.getMethodProfiler().enter("explosion_blocks");
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 8d87bd4fd0f414427a7f01311c4e82585ec01555..e204be8ed1a43909baab37a571a83a295273766a 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -22,7 +22,6 @@ import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -936,6 +935,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     @Override
     public void a(PacketPlayInBEdit packetplayinbedit) {
+        /*
         // Paper start
         ItemStack testStack = packetplayinbedit.getBook();
         if (!server.isPrimaryThread() && !testStack.isEmpty() && testStack.getTag() != null) {
@@ -985,6 +985,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
             }
         }
         // Paper end
+        */
         // CraftBukkit start
         if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
             this.disconnect("Book edited too quickly!");
diff --git a/src/main/java/net/minecraft/server/TileEntityPiston.java b/src/main/java/net/minecraft/server/TileEntityPiston.java
index b0d52d7405ca24938ca753897f89e6fad575d04d..fce2933914caad0ecde3bd6407a3326950256d9b 100644
--- a/src/main/java/net/minecraft/server/TileEntityPiston.java
+++ b/src/main/java/net/minecraft/server/TileEntityPiston.java
@@ -42,7 +42,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
         return this.b;
     }
 
-    public final boolean isHead() { return this.h(); } // Paper - OBFHELPER
+    // public final boolean isHead() { return this.h(); } // Paper - OBFHELPER
 
     public boolean h() {
         return this.g;
@@ -258,7 +258,8 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                     IBlockData iblockdata = Block.b(this.a, (GeneratorAccess) this.world, this.position);
 
                     if (iblockdata.isAir()) {
-                    this.world.setTypeAndData(this.position, this.a, com.destroystokyo.paper.PaperConfig.allowPistonDuplication ? 84 : (84 | 2)); // Paper - force notify (flag 2), it's possible the set type by the piston block (which doesn't notify) set this block to air
+                    // this.world.setTypeAndData(this.position, this.a, com.destroystokyo.paper.PaperConfig.allowPistonDuplication ? 84 : (84 | 2)); // Paper - force notify (flag 2), it's possible the set type by the piston block (which doesn't notify) set this block to air
+                    this.world.setTypeAndData(this.position, this.a, 84);
                         Block.a(this.a, iblockdata, this.world, this.position, 3);
                     } else {
                         if (iblockdata.b(BlockProperties.C) && (Boolean) iblockdata.get(BlockProperties.C)) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 43e20a8e04b8cf54f9277e1cf71ccffe435531bd..82dd4272946caa5c8147cd769bff84aebd3b188c 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -537,10 +537,12 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         org.spigotmc.AsyncCatcher.catchOp("set type call"); // Tuinity
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
+            /*
             // Paper start
             IBlockData type = getType(blockposition);
             if (!type.isDestroyable()) return false;
             // Paper end
+            */
             CraftBlockState blockstate = capturedBlockStates.get(blockposition);
             if (blockstate == null) {
                 blockstate = CapturedBlockState.getTreeBlockState(this, blockposition, i);
