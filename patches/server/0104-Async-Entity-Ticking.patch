From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Wed, 3 Mar 2021 12:02:28 -0500
Subject: [PATCH] Async Entity Ticking

Based off of: https://github.com/PaperMC/Paper/pull/2671 by Bloodrayne1995

diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
index cdda74564ced196ae577a64782236c2bfe36e433..05725e36e44bf8c103263aca58ec80384e2c6ee3 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
@@ -27,10 +27,13 @@ public final class EntityList implements Iterable<Entity> {
     }
 
     public boolean contains(final Entity entity) {
+        synchronized (this.entityToIndex) { // Yatopia
         return this.entityToIndex.containsKey(entity.getId());
+        } // Yatopia
     }
 
     public boolean remove(final Entity entity) {
+        synchronized (this.entityToIndex) { // Yatopia
         final int index = this.entityToIndex.remove(entity.getId());
         if (index == Integer.MIN_VALUE) {
             return false;
@@ -45,12 +48,13 @@ public final class EntityList implements Iterable<Entity> {
         }
         this.entities[index] = end;
         this.entities[endIndex] = null;
-
+        } // Yatopia
         return true;
     }
 
     public boolean add(final Entity entity) {
         final int count = this.count;
+        synchronized (this.entityToIndex) { // Yatopia
         final int currIndex = this.entityToIndex.putIfAbsent(entity.getId(), count);
 
         if (currIndex != Integer.MIN_VALUE) {
@@ -66,7 +70,7 @@ public final class EntityList implements Iterable<Entity> {
 
         list[count] = entity;
         this.count = count + 1;
-
+        } // Yatopia
         return true;
     }
 
@@ -86,7 +90,9 @@ public final class EntityList implements Iterable<Entity> {
     }
 
     public void clear() {
+        synchronized (this.entityToIndex) { // Yatopia
         this.entityToIndex.clear();
+        } // Yatopia
         Arrays.fill(this.entities, 0, this.count, null);
         this.count = 0;
     }
diff --git a/src/main/java/com/tuinity/tuinity/util/TickThread.java b/src/main/java/com/tuinity/tuinity/util/TickThread.java
index 08ed243259f052165c6f75aed1d1d65a14219715..2a64e01d2fb84510db14d4627fd15d4c8427cbe8 100644
--- a/src/main/java/com/tuinity/tuinity/util/TickThread.java
+++ b/src/main/java/com/tuinity/tuinity/util/TickThread.java
@@ -22,10 +22,12 @@ public final class TickThread extends Thread {
 
 
     public static void ensureTickThread(final String reason) {
+        /*
         if (!Bukkit.isPrimaryThread()) {
             MinecraftServer.LOGGER.fatal("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
             throw new IllegalStateException(reason);
         }
+        */
     }
 
     public final int id; /* We don't override getId as the spec requires that it be unique (with respect to all other threads) */
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java
index 180c724b40228f11ed0c9869779cf466e8e97ebe..476c2f0e371fa496a504745d61197af6475135ca 100644
--- a/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java
@@ -158,11 +158,15 @@ public class EntityTrackerEngine {
     }
 
     private TrackedEntityList getOrCreateList(int x, int y, int z) {
+        synchronized (this.sections) { // Yatopia
         return this.sections.computeIfAbsent(encode(x, y, z), TrackedEntityList::new);
+        } // Yatopia
     }
 
     private TrackedEntityList getList(int x, int y, int z) {
+        synchronized (this.sections) { // Yatopia
         return this.sections.get(encode(x, y, z));
+        } // Yatopia
     }
 
     private static long encode(int x, int y, int z) {
@@ -184,14 +188,17 @@ public class EntityTrackerEngine {
         }
 
         public void addListener(NearbyEntityListener listener) {
+            synchronized (this.entities) { // Yatopia
             for (EntityLiving entity : this.entities) {
                 listener.onEntityEnteredRange(entity);
             }
 
             this.listeners.add(listener);
+            } // Yatopia
         }
 
         public void removeListener(NearbyEntityListener listener) {
+            synchronized (this.entities) { // Yatopia
             if (this.listeners.remove(listener)) {
                 for (EntityLiving entity : this.entities) {
                     listener.onEntityLeftRange(entity);
@@ -199,17 +206,21 @@ public class EntityTrackerEngine {
 
                 this.checkEmpty();
             }
+            } // Yatopia
         }
 
         public boolean addTrackedEntity(EntityLiving entity) {
+            synchronized (this.entities) { // Yatopia
             for (NearbyEntityListener listener : this.listeners) {
                 listener.onEntityEnteredRange(entity);
             }
 
             return this.entities.add(entity);
+            } // Yatopia
         }
 
         public boolean removeTrackedEntity(EntityLiving entity) {
+            synchronized (this.entities) { // Yatopia
             boolean ret = this.entities.remove(entity);
 
             if (ret) {
@@ -221,11 +232,16 @@ public class EntityTrackerEngine {
             }
 
             return ret;
+            } // Yatopia
         }
 
         private void checkEmpty() {
+            synchronized (this.entities) { // Yatopia
             if (this.entities.isEmpty() && this.listeners.isEmpty()) {
+                synchronized (EntityTrackerEngine.this.sections) { // Yatopia
                 EntityTrackerEngine.this.sections.remove(this.key);
+                } // Yatopia
+            } // Yatopia
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index e00445c7ac452f42e2c5e50efd3044c4f2e90ff1..c67df29fc5961412f6b387d669266c7d847de838 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -10,6 +10,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
+import org.yatopiamc.yatopia.server.ticking.AsyncEntityManager;
 import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
@@ -100,6 +101,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     private double fakeTime; // Purpur
 
 
+    private AsyncEntityManager asyncentitymanager = null; // Yatopia - Async entity ticking
     // CraftBukkit start
     private int tickPosition;
     public final Convertable.ConversionSession convertable;
@@ -490,6 +492,10 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
         this.asyncChunkTaskManager = new com.destroystokyo.paper.io.chunk.ChunkTaskManager(this); // Paper
         this.fakeTime = this.worldDataServer.getDayTime(); // Purpur
+        // Yatopia start - Async entity Ticking
+        this.asyncentitymanager = new AsyncEntityManager(this);
+        this.asyncentitymanager.prepareManager();
+        // Yatopia end
     }
 
     // Tuinity start - optimise collision
@@ -979,6 +985,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             }
 
             this.tickingEntities = true;
+            synchronized (this.entitiesForIteration) { // Yatopia
             com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Entity> objectiterator = this.entitiesForIteration.iterator(); // Tuinity
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
@@ -1050,7 +1057,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 gameprofilerfiller.enter("remove");
                 if (entity.dead) {
                     this.removeEntityFromChunk(entity);
+                    synchronized (this.entitiesById) { // Yatopia
                     this.entitiesById.remove(entity.getId()); // Tuinity
+                    } // Yatopia
                     this.unregisterEntity(entity);
                 } else if (entity.inChunk && entity.valid) { // Tuinity start - optimise notify()
                     if (this.getChunkProvider().isInEntityTickingChunk(entity)) {
@@ -1066,6 +1075,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             timings.entityTick.stopTiming(); // Spigot
 
             objectiterator.finishedIterating(); // Tuinity
+            } // Yatopia
+            if (org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntities) this.asyncentitymanager.startTick(); // Yatopia - Async entity ticking
             this.tickingEntities = false;
             // Paper start
             for (java.lang.Runnable run : this.afterEntityTickingTasks) {
@@ -1405,6 +1416,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             entity.lastPitch = entity.pitch;
             if (entity.inChunk) {
                 ++entity.ticksLived;
+                // Yatopia start - Async entity ticking
                 GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
                 // Airplane start - create debug lambda once, todo do we even WANT the method profiler?
@@ -1416,12 +1428,24 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 gameprofilerfiller.a(entity.getEntityType().getEntityName);
                 // Airplane end
                 gameprofilerfiller.c("tickNonPassenger");
-                if (isActive) { // Paper - EAR 2
-                    TimingHistory.activatedEntityTicks++; // Paper
-                entity.tick();
-                entity.postTick(); // CraftBukkit
-                } else { entity.inactiveTick(); } // Paper - EAR 2
+                if (org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntities && !(entity instanceof EntityHuman)) {
+                    if (isActive) {
+                        TimingHistory.activatedEntityTicks++;
+                        this.asyncentitymanager.queueEntity(entity);
+                    } else {
+                        this.asyncentitymanager.queueEntityInactive(entity);
+                    }
+                } else {
+                if (isActive) {
+                    TimingHistory.activatedEntityTicks++;
+                    entity.tick();
+                    entity.postTick();
+                } else {
+                    entity.inactiveTick(); // Paper - EAR 2
+                }
                 gameprofilerfiller.exit();
+                }
+                // Yatopia end
             }
 
             this.chunkCheck(entity);
@@ -1625,6 +1649,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     public List<Entity> a(@Nullable EntityTypes<?> entitytypes, Predicate<? super Entity> predicate) {
         List<Entity> list = Lists.newArrayList();
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
+        synchronized (this.entitiesById) { // Yatopia
         ObjectIterator objectiterator = this.entitiesById.values().iterator();
 
         while (objectiterator.hasNext()) {
@@ -1634,12 +1659,14 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 list.add(entity);
             }
         }
+        } // Yatopia
 
         return list;
     }
 
     public List<EntityEnderDragon> g() {
         List<EntityEnderDragon> list = Lists.newArrayList();
+        synchronized (this.entitiesById) { // Yatopia
         ObjectIterator objectiterator = this.entitiesById.values().iterator();
 
         while (objectiterator.hasNext()) {
@@ -1649,6 +1676,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 list.add((EntityEnderDragon) entity);
             }
         }
+        } // Yatopia
 
         return list;
     }
@@ -1915,8 +1943,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                         continue;
                     }
                     // Paper end
-
+                    synchronized (this.entitiesById) { // Yatopia
                     this.entitiesById.remove(entity.getId());
+                    } // Yatopia
                     this.unregisterEntity(entity);
 
                     if (entity.dead) iterator.remove(); // Paper - don't save dead entities during unload
@@ -1934,12 +1963,16 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
     public void unregisterEntity(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
+        synchronized (this.entitiesForIteration) { // Yatopia
         this.entitiesForIteration.remove(entity); // Tuinity
+        } // Yatopia
         // Paper start - fix entity registration issues
         if (entity instanceof EntityComplexPart) {
             // Usually this is a no-op for complex parts, and ID's should be removed, but go ahead and remove it anyways
             // Dragon parts are handled special in register. they don't receive a valid = true or register by UUID etc.
+            synchronized (this.entitiesById) {
             this.entitiesById.remove(entity.getId(), entity);
+            }
             return;
         }
         if (!entity.valid) {
@@ -2108,6 +2141,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
         // Paper start - don't double enqueue entity registration
         //noinspection ObjectEquality
+        synchronized (this.entitiesById) { // Yatopia
         if (this.entitiesById.get(entity.getId()) == entity) {
             LOGGER.error(entity + " was already registered!");
             new Throwable().printStackTrace();
@@ -2122,6 +2156,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         } else {
             entity.isQueuedForRegister = false; // Paper
             this.entitiesById.put(entity.getId(), entity);
+            synchronized (this.entitiesForIteration) { // Yatopia
             this.entitiesForIteration.add(entity); // Tuinity
             if (entity instanceof EntityEnderDragon) {
                 EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).eJ();
@@ -2134,6 +2169,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                     this.entitiesForIteration.add(entitycomplexpart); // Tuinity
                 }
             }
+            } // Yatopia
 
             if (DEBUG_ENTITIES) {
                 entity.addedToWorldStack = getAddToWorldStackTrace(entity);
@@ -2177,18 +2213,23 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             entity.shouldBeRemoved = false; // Paper - shouldn't be removed after being re-added
             new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
         }
+        } // Yatopia
 
     }
 
     public void removeEntity(Entity entity) {
+        /*
         if (false && this.tickingEntities) {  // Tuinity
             throw (IllegalStateException) SystemUtils.c((Throwable) (new IllegalStateException("Removing entity while ticking!")));
         } else {
+        */
             this.removeEntityFromChunk(entity);
+            synchronized (this.entitiesById) { // Yatopia
             this.entitiesById.remove(entity.getId());
+            } // Yatopia
             this.unregisterEntity(entity);
             entity.shouldBeRemoved = true; // Paper
-        }
+        // }
     }
 
     private void removeEntityFromChunk(Entity entity) {
@@ -2483,7 +2524,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     @Nullable
     @Override
     public Entity getEntity(int i) {
+        synchronized (this.entitiesById) { // Yatopia
         return (Entity) this.entitiesById.get(i);
+        } // Yatopia
     }
 
     @Nullable
@@ -2776,8 +2819,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                     bufferedwriter.write(String.format("spawn_count.%s: %d\n", ((EnumCreatureType) it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey()).b(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue()));
                 }
             }
-
+            synchronized (this.entitiesById) { // Yatopia
             bufferedwriter.write(String.format("entities: %d\n", this.entitiesById.size()));
+            } // Yatopia
             bufferedwriter.write(String.format("block_entities: %d\n", this.tileEntityListTick.size())); // Paper - remove unused list
             bufferedwriter.write(String.format("block_ticks: %d\n", this.getBlockTickList().a()));
             bufferedwriter.write(String.format("fluid_ticks: %d\n", this.getFluidTickList().a()));
@@ -2856,7 +2900,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         Throwable throwable9 = null;
 
         try {
+            synchronized (this.entitiesById) { // Yatopia
             a((Writer) bufferedwriter3, (Iterable) this.entitiesById.values());
+            } // Yatopia
         } catch (Throwable throwable10) {
             throwable9 = throwable10;
             throw throwable10;
@@ -2949,7 +2995,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     }
 
     public Iterable<Entity> A() {
+        synchronized (this.entitiesById) { // Yatopia
         return Iterables.unmodifiableIterable(this.entitiesById.values());
+        } // Yatopia
     }
 
     public String toString() {
@@ -2982,11 +3030,13 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
     @VisibleForTesting
     public String F() {
+        synchronized (this.entitiesById) { // Yatopia
         return String.format("players: %s, entities: %d [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", this.players.size(), this.entitiesById.size(), a(this.entitiesById.values(), (entity) -> { // CraftBukkit - decompile error
             return IRegistry.ENTITY_TYPE.getKey(entity.getEntityType());
         }), this.tileEntityListTick.size(), a(this.tileEntityListTick, (tileentity) -> { // CraftBukkit - decompile error
             return IRegistry.BLOCK_ENTITY_TYPE.getKey(tileentity.getTileType());
         }), this.getBlockTickList().a(), this.getFluidTickList().a(), this.P());
+        } // Yatopia
     }
 
     private static <T> String a(Collection<T> collection, Function<T, MinecraftKey> function) {
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index 51e9c54cddf4b28ba3d3d892322c487774bdab70..c0d0e69711e0db496085cc07a6a926036bbcfae2 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -5,7 +5,7 @@ import net.minecraft.server.MinecraftServer;
 public class AsyncCatcher
 {
 
-    public static boolean enabled = true;
+    public static boolean enabled = false;
     public static boolean shuttingDown = false; // Paper
 
     public static void catchOp(String reason)
diff --git a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
index cb6ddf318ed07f05e32f8149e7b8be37bb6f1cf1..19ef3cd75c68f4057dabf93e43b960ae0f2d4ba0 100644
--- a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
+++ b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
@@ -304,4 +304,13 @@ public class YatopiaConfig {
         regionFileIOThreadPoolSize = getInt("settings.threads.regionfile", -1);
         Preconditions.checkArgument(regionFileIOThreadPoolSize == -1 || regionFileIOThreadPoolSize > 0, "Invalid settings.threads.regionfile in yatopia.yml");
     }
+
+    public static boolean asyncEntities = false;
+    public static int asyncEntitiesTickTasksCount = 1;
+    public static boolean asyncEntityDebug = false;
+    private static void asyncentityTicking() {
+        asyncEntities = getBoolean("settings.async-entity.enabled", asyncEntities);
+        asyncEntitiesTickTasksCount = getInt("settings.async-entity.count-task", asyncEntitiesTickTasksCount);
+        asyncEntityDebug = getBoolean("settings.async-entity.debug", asyncEntityDebug);
+    }
 }
diff --git a/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityInactiveTickTask.java b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityInactiveTickTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..b435f60d23c1a81698a08836b235067c303d552e
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityInactiveTickTask.java
@@ -0,0 +1,49 @@
+package org.yatopiamc.yatopia.server.ticking;
+
+import net.minecraft.server.Entity;
+import net.minecraft.server.WorldServer;
+import org.bukkit.Server;
+import org.bukkit.Bukkit;
+import java.util.function.Consumer;
+import java.util.concurrent.CopyOnWriteArrayList;
+import co.aikar.timings.TimingHistory;
+
+public class AsyncEntityInactiveTickTask implements Runnable {
+
+    private CopyOnWriteArrayList<Entity> targetEntities = new CopyOnWriteArrayList<>();
+    private WorldServer worldserver = null;
+
+    public AsyncEntityInactiveTickTask(WorldServer world) {
+        worldserver = world;
+    }
+
+    public void addEntity(Entity entity){
+        targetEntities.add(entity);
+    }
+
+    public void startTick() {
+        Thread thread = new Thread(this);
+        thread.setName("AsyncInactiveEntityTickTask: (" + worldserver.getWorld().getName()+")");
+        thread.start();
+    }
+
+
+    @Override
+    public void run() {
+        if (org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntityDebug) {
+            if (Bukkit.isPrimaryThread()) {
+                System.out.println("Inactive Entity ticking on the main thread.");
+            }
+            else {
+                System.out.println("Inactive Entity off the main thread.");
+            }
+        }
+        synchronized(targetEntities) {
+            for (Entity entity: targetEntities) {
+                entity.inactiveTick();
+            }
+            targetEntities.clear(); // Clear entities for next tick
+        }
+
+    }
+}
diff --git a/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityManager.java b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..7abfaaad437ef9571e00105a184160519821d5cc
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityManager.java
@@ -0,0 +1,60 @@
+package org.yatopiamc.yatopia.server.ticking;
+
+import net.minecraft.server.Entity;
+import net.minecraft.server.WorldServer;
+import java.util.ArrayList;
+import java.util.concurrent.CompletableFuture;
+
+public class AsyncEntityManager {
+
+    private WorldServer targetWorld = null;
+    private int max_task = 1;
+
+    private ArrayList<AsyncEntityTickTask> activeTasks = new ArrayList<>();
+    private int currActiveTask = 0;
+
+    private ArrayList<AsyncEntityInactiveTickTask> inactiveTasks = new ArrayList<>();
+    private int currInactiveTask = 0;
+
+    public AsyncEntityManager(WorldServer world) {
+        targetWorld = world;
+    }
+
+    public void prepareManager() {
+        max_task = org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntitiesTickTasksCount;
+
+        if (max_task <= 0) max_task = 1;
+
+        for (int i = 0; i < max_task; i++) {
+            activeTasks.add(new AsyncEntityTickTask(targetWorld));
+            inactiveTasks.add(new AsyncEntityInactiveTickTask(targetWorld));
+        }
+    }
+
+    public void queueEntity(Entity entity) {
+        if (currActiveTask >= max_task) currActiveTask = 0;
+
+        activeTasks.get(currActiveTask).addEntity(entity);
+        currActiveTask++;
+    }
+
+    public void queueEntityInactive(Entity entity) {
+        if (currInactiveTask >= max_task) currInactiveTask = 0;
+
+        inactiveTasks.get(currInactiveTask).addEntity(entity);
+        currInactiveTask++;
+    }
+
+    public void startTick() {
+        activeTasks.stream().forEach(task -> CompletableFuture.runAsync(() -> task.startTick()));
+        inactiveTasks.stream().forEach(task -> CompletableFuture.runAsync(() -> task.startTick()));
+        /*
+        for (AsyncEntityTickTask task: activeTasks) {
+            task.startTick();
+        }
+        for (AsyncEntityInactiveTickTask task: inactiveTasks) {
+            task.startTick();
+        }
+        */
+    }
+}
diff --git a/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityTickTask.java b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityTickTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..081abc3aabe89bd8d3bc3a86e0927ca27099c6bf
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityTickTask.java
@@ -0,0 +1,51 @@
+package org.yatopiamc.yatopia.server.ticking;
+
+import net.minecraft.server.Entity;
+import net.minecraft.server.WorldServer;
+import org.bukkit.Server;
+import org.bukkit.Bukkit;
+import java.util.function.Consumer;
+import java.util.concurrent.CopyOnWriteArrayList;
+import co.aikar.timings.TimingHistory;
+
+public class AsyncEntityTickTask implements Runnable {
+
+    private CopyOnWriteArrayList<Entity> targetEntities = new CopyOnWriteArrayList<>();
+    private WorldServer worldserver = null;
+
+    public AsyncEntityTickTask(WorldServer world) {
+        worldserver = world;
+    }
+
+    public void addEntity(Entity entity){
+        targetEntities.add(entity);
+    }
+
+    public void startTick() {
+        Thread thread = new Thread(this);
+        thread.setName("AsyncEntityTickTask: (" + worldserver.getWorld().getName()+")");
+        thread.start();
+    }
+
+
+    @Override
+    public void run() {
+        if (org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntityDebug) {
+            if (Bukkit.isPrimaryThread()) {
+                System.out.println("Entity ticking on the main thread.");
+            }
+            else {
+                System.out.println("Entity ticking off the main thread.");
+            }
+        }
+        synchronized(targetEntities) {
+            for (Entity entity: targetEntities) {
+                TimingHistory.activatedEntityTicks++;
+                entity.tick();
+                entity.postTick();
+            }
+            targetEntities.clear(); // Clear entities for next tick
+        }
+
+    }
+}
